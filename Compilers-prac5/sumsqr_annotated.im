

 LABEL L9

 # Place address t100-4 (local variable arr) on t100-28 (temporary)
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -28)),
  BINOP(PLUS,
   TEMP t100,
   CONST -4))
 
# Init array and store the result on t100-24 (temporary)
var arr : intarray := intarray[100] of 0
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -24)),
  CALL(
   NAME initArray,
    CONST 100,
    CONST 0))

# Move the result of initarray, which is stored on t100-24
# to the address stored on t100-28 (derefernce)
 MOVE(
  MEM(
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST -28))),
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -24)))

var i : int := 0
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)),
  CONST 0)

var to_square : int := 0
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -12)),
  CONST 0)

# Assign value to i, store 9 on the stack
# Check loop condition to see if loop body should be executed
for i := 0 to 9 do
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -16)),
  CONST 0)
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -20)),
  CONST 9)
 CJUMP(LT,
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -16)),
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -20)),
  L6,L5)

 LABEL L5
add_sqr (arr, 10)
 EXP(
  CALL(
   NAME add_sqr,
    TEMP t100,
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST -4)),
    CONST 10))
 JUMP(
  NAME L8)

# After execution of loop body, check whether body should
# be executed again, or execution should continue
for i := 0 to 9 do
 LABEL L6
 CJUMP(GT,
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -16)),
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -20)),
  L5,L7)

arr[i] := i+1;
 LABEL L7
 MOVE(
  # arr[i]
  MEM(
   BINOP(PLUS,
    # start of arr
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST -4)),
    # offset i in arr
    BINOP(TIMES,
     MEM(
      BINOP(PLUS,
       TEMP t100,
       CONST -16)),
     CONST 4))),
  # i+1
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST -16)),
   CONST 1))

# Increment loop counter: i = i+1 
for i := 0 to 9 do
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -16)),
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST -16)),
   CONST 1))
 # Jump to loop condition check
 JUMP(
  NAME L6)

 LABEL L8

# Begin of function add_sqr
function add_sqr (a: intarray, limit: int) : int = let
 LABEL L11

 var idx : int := 0
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -4)),
  CONST 0)

 var sum : int := 0
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)),
  CONST 0)

 idx := 0;
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -4)),
  CONST 0)

 sum := 0;
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)),
  CONST 0)

 addone();
 EXP(
  CALL(
   NAME addone,
    TEMP t100))

 # Return value 'sum', placed in return temporary
 sum
 MOVE(
  TEMP t101,
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)))
 JUMP(
  NAME L10)
# End of function add_sqr
 LABEL L10
 #retrun point


# Begin of function addone 
function addone () = 
 LABEL L13

to_square := a[idx];
 MOVE(
  # Address of to_square by following static link
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      MEM(
       BINOP(PLUS,
        TEMP t100,
        CONST 8)),
      CONST 8)),
    CONST -12)),
  # Get value at a[idx]
  MEM(
   BINOP(PLUS,
    # address of array
    MEM(
     BINOP(PLUS,
      MEM(
       BINOP(PLUS,
        TEMP t100,
        CONST 8)),
      CONST 12)),
    # offset idx in bytes
    BINOP(TIMES,
     # idx
     MEM(
      BINOP(PLUS,
       MEM(
        BINOP(PLUS,
         TEMP t100,
         CONST 8)),
       CONST -4)),
     CONST 4)))) # element size

# Get the address of the variable sum into stack frame
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -20)),
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST 8)),
   CONST -8))
# Copy variable sum into stack frame of addone
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -16)),
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST 8)),
    CONST -8)))

sum := sum + square ();
 # calculate 'square ()' and store the result;
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -12)),
  CALL(
   NAME square,
    # Travel 2 static links upwards
    MEM(
     BINOP(PLUS,
      MEM(
       BINOP(PLUS,
        TEMP t100,
        CONST 8)),
      CONST 8))))
 # assign 'sum := sum + square ()' via pointer of sum
 MOVE(
  MEM(
   # address of sum
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST -20))),
  # calculate 'sum + square ()'
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST -16)),
   MEM(
    BINOP(PLUS,
     TEMP t100,
     CONST -12))))

idx := idx + 1;
# Assign idx via pointer (outside local stack)
 MOVE(
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST 8)),
    CONST -4)),
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       TEMP t100,
       CONST 8)),
     CONST -4)),
   CONST 1))

# Set flag for later use
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)),
  CONST 1)

if (idx < limit)
 CJUMP(LT,
  # Access idx
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST 8)),
    CONST -4)),
  # Access limit
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST 8)),
    CONST 16)),
  L0,L1)

 # Set flag to false, if CJUMP before this failed
 LABEL L1
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)),
  CONST 0)

 # CJUMP goes to here if success
 LABEL L0
 # Check flag value
 CJUMP(NE,
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -8)),
  CONST 0,
  L2,L3)

 # Flag is set to zero
 LABEL L3
 # set local variable containing the return value to 0
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -4)),
  CONST 0)
 # Move return value to return register
 LABEL L4
 MOVE(
  TEMP t101,
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -4)))
 JUMP(
  NAME L12)

 # Flag was set not to zero: then branch
 LABEL L2

 # Place result of recursive call into our temporary
 # return value on the stack
 MOVE(
  MEM(
   BINOP(PLUS,
    TEMP t100,
    CONST -4)),
  CALL(
   NAME addone,
    MEM(
     BINOP(PLUS,
      TEMP t100,
      CONST 8))))
 # Jump to code for returning the result of the function
 JUMP(
  NAME L4)
 LABEL L12
 # End of function addone

 
 LABEL L15
 # Place 0 in return temporary
 MOVE(
  TEMP t101,
  BINOP(TIMES,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       TEMP t100,
       CONST 8)),
     CONST -12)),
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       TEMP t100,
       CONST 8)),
     CONST -12))))
 JUMP(
  NAME L14)
 LABEL L14
